#include <bits/stdc++.h>
using namespace std;
class DynamicArray{
	int *data;
	int nextIndex;
	int capacity;
	public:
		DynamicArray(){
			data = new int[5];				//first create an array of 5 capacity
			nextIndex = 0;
			capacity = 5;
		}
		DynamicArray (DynamicArray const &d){	//copy constructor
			this->data = d.data;		//shallow copy
			//Deep copy
			this->data = new int[d.capacity];
			for(int i=0;i<d.capacity;i++)
				this->data[i] = d.data[i];
			this->nextIndex = d.nextIndex;
			this->capacity = d.capacity;
		}
		void operator=(DynamicArray const &d){		//operator = overloading
			this->data = d.data;
			this->data = new int[d.capacity];
			for(int i=0;i<d.capacity;i++)
				this->data[i] = d.data[i];
			this->nextIndex = d.nextIndex;
			this->capacity = d.capacity;
		}
		void add(int element){
			if(nextIndex == capacity){			//if array get full
				int *newData = new int[2*capacity];		//new array of double capacity
				for(int i=0;i<capacity;i++)
					newData[i] = data[i];
				delete [] data;				//delete previous array
				data = newData;				//points data pointer to this new array
				capacity *= 2;
			}
			data[nextIndex] = element;
			nextIndex++;
		}
		int get(int i) const{
			if(i<nextIndex)
				return data[i];
			else
				return -1;
		}
		void add(int i,int element){
			if(i<nextIndex)
				data[i] = element;
			else if(i==nextIndex)
				add(element);
			else
				return;
		}
		void print() const{
			for(int i=0;i<nextIndex;i++)
				cout<<data[i]<<" ";
			cout<<endl;
		}
};
int main(){
	DynamicArray d1;
	d1.add(10);
	d1.add(11);
	d1.add(12);
	d1.add(13);
	d1.add(14);
	d1.add(15);
	
	d1.print();
	DynamicArray d2(d1);	//copy constructor,by default Shallow copy i.e. only address copy so create your own with deep copy
	DynamicArray d3;
	d3 = d1;				//copy assignment operator , shallow copy, so overload operator for deep copy
	d1.add(0,20);
	d1.print();
	d2.print();
	d3.print();
}