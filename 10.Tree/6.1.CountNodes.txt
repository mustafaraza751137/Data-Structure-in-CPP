#include<bits/stdc++.h>
using namespace std;

template<typename T>
class TreeNode{
	public:
		T data;
		vector<TreeNode<T>*> children;
		TreeNode(T data){
			this->data=data;
		}
};

void printTree(TreeNode<int>* root){
	if(root==NULL)
		return;
	queue<TreeNode<int>*> pendingNodes;
	pendingNodes.push(root);
	while(pendingNodes.size()!=0){
		TreeNode<int>* front=pendingNodes.front();
		pendingNodes.pop();
		cout<<front->data<<" : ";
		for(int i=0;i<front->children.size();i++){
			cout<<front->children[i]->data<<", ";
			pendingNodes.push(front->children[i]);
		}
		cout<<endl;
	}
}

int printSum(TreeNode<int>* root,int sum){
	if(root==NULL)
		return 0;
	sum+=root->data;
	for(int i=0;i<root->children.size();i++){
		sum=printSum(root->children[i],sum);
	}
	return sum;
}

int printLargest(TreeNode<int>* root,int largest){
	if(root==NULL)
		return 0;
	if(largest<root->data)
		largest=root->data;
	for(int i=0;i<root->children.size();i++){
		largest=printLargest(root->children[i],largest);
	}
	return largest;
}

int countNodes(TreeNode<int>* root,int count){
	if(root==NULL)
		return 0;
	count++;
	for(int i=0;i<root->children.size();i++){
		count=countNodes(root->children[i],count);
	}
	return count;
}

TreeNode<int>* takeInput(){
	// cout<<"Enter root Node"<<endl;
	int data;
	cin>>data;
	TreeNode<int>* root=new TreeNode<int>(data);
	queue<TreeNode<int>*> pendingNodes;
	pendingNodes.push(root);
	while(pendingNodes.size()!=0){
		TreeNode<int>* front=pendingNodes.front();
		pendingNodes.pop();
		int n;
		// cout<<"Enter number of child of "<<front->data<<endl;
		cin>>n;
		// cout<<"Enter child data"<<endl;
		for(int i=0;i<n;i++){
			int childData;
			cin>>childData;
			TreeNode<int>* childNode=new TreeNode<int>(childData);
			front->children.push_back(childNode);
			pendingNodes.push(childNode);
		}
	}
	return root;
}

int main(){
	TreeNode<int>* root=takeInput();
	cout<<"count:"<<endl;
	// printTree(root);
	// cout<<printSum(root,0);
	// cout<<printLargest(root,0);
	cout<<countNodes(root,0);
	return 0;
}

//******
input
10 3 20 30 40 2 40 50 0 0 0 0

output
count:
6