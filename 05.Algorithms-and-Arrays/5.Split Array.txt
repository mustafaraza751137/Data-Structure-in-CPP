@csalgo

Chapter TEST
Problem Statement: Split Array
Problem Level: MEDIUM
Problem Description:
Given an integer array A of size N, check if the input array can be splitted in two parts such that -
- Sum of both parts is equal
- All elements in the input, which are divisible by 5 should be in same group.
- All elements in the input, which are divisible by 3 (but not divisible by 5) should be in other group.
- Elements which are neither divisible by 5 nor by 3, can be put in any group.

Groups can be made with any set of elements, i.e. elements need not to be continuous. 
And you need to consider each and every element of input array in some group.
Return true, if array can be split according to the above rules, else return false.
Note : You will get marks only if all the test cases are passed.
Input Format :
Line 1 : Integer N (size of array)
Line 2 : Array A elements (separated by space)

Output Format :
true or false

Constraints :
1 <= N <= 50

Sample Input 1 :
2
1 2

Sample Output 1 :
false

Sample Input 2 :
3
1 4 3

Sample Output 2 :
true



=====Answer=====
Correct Option: 

@csalgo


#include <bits/stdc++.h>
using namespace std;
bool isSplitArray(int* arr, int start, int n, int left_sum, int right_sum) {
	if (start == n)
		return left_sum == right_sum;		//return if left_sum == right_sum	
		
	if (arr[start] % 5 == 0) 				//when the element is divisible by 5, add to left sum
		left_sum += arr[start];
	else if (arr[start] % 3 == 0) 			//when the element is divisible by 3 but not 5, add to right sum
	    right_sum += arr[start];
	else 									// otherwise it can be added to any of the sub-arrays
	    return isSplitArray(arr, start + 1, n, left_sum + arr[start], right_sum) || isSplitArray(arr, start + 1, n, left_sum, right_sum + arr[start]);
	
	return isSplitArray(arr, start + 1, n, left_sum, right_sum);		// For cases when element is multiple of 3 or 5.
}
int main() {
	int n;
	cin>>n;
	int *arr=new int[n];
	for(int i=0;i<n;i++)
		cin>>arr[i];
	
	if(isSplitArray(arr, 0, n, 0, 0)){
		cout <<"true";
	}
	else{
		cout <<"false";
	}
}