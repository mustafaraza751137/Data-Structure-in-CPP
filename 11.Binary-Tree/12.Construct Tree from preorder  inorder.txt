@csalgo

Coding Problem
Problem Statement: Construct Tree from preorder  inorder
Problem Level: MEDIUM
Problem Description:
For a given preorder and inorder traversal of a Binary Tree of type integer stored in an array/list, create the binary tree using the given two arrays/lists. You just need to construct the tree and return the root.
Note:
Assume that the Binary Tree contains only unique elements.

Input Format:
The first line of input contains an integer N denoting the size of the list/array. It can also be said that N is the total number of nodes the binary tree would have.

The second line of input contains N integers, all separated by a single space. It represents the preorder-traversal of the binary tree.

The third line of input contains N integers, all separated by a single space. It represents the inorder-traversal of the binary tree.

Output Format:
The given input tree will be printed in a level order fashion where each level will be printed on a new line. 
Elements on every level will be printed in a linear fashion. A single space will separate them.

Constraints:
1 <= N <= 10^4
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec

Sample Input 1:
7
1 2 4 5 3 6 7 
4 2 5 1 6 3 7

Sample Output 1:
1 
2 3 
4 5 6 7

Sample Input 2:
6
5 6 2 3 9 10 
2 6 3 9 5 10

Sample Output 2:
5 
6 10 
2 3 
9

@csalgo


#include<bits/stdc++.h>
using namespace std;

template<typename T>
class TreeNode{
	public:
		T data;
		TreeNode<T>* left;
		TreeNode<T>* right;
		TreeNode(T data){
			this->data=data;
			left=NULL;
			right=NULL;
		}
		~TreeNode(){
			delete left;
			delete right;
		}
};

TreeNode<int>* takeInput(int pre[],int in[],int start,int end){
	if(start>end)
		return NULL;
	static int preIndex=0;
	TreeNode<int>* root=new TreeNode<int>(pre[preIndex++]);
	int inIndex;
	if(start==end)
		return root;
	for(int i=start;i<=end;i++){
		if(in[i]==root->data){
			inIndex=i;
			break;
		}
	}
	root->left=takeInput(pre,in,start,inIndex-1);
	root->right=takeInput(pre,in,inIndex+1,end);
	return root;
}

void printTreeWise(TreeNode<int>* root){
	if(root==NULL)
		return;
	queue<TreeNode<int>*> pendingNodes;
	pendingNodes.push(root);
	pendingNodes.push(NULL);
	while(pendingNodes.size()!=0){
		TreeNode<int>* front=pendingNodes.front();
		pendingNodes.pop();
		if(front==NULL){
			cout<<endl;
			if(pendingNodes.size()!=0)
				pendingNodes.push(NULL);
		}
		if(front!=NULL){
			cout<<front->data<<" ";
			if(front->left)
				pendingNodes.push(front->left);
			if(front->right)
				pendingNodes.push(front->right);
		}
	}
}

int main(){
	int size;
	cin>>size;
	int *pre=new int[size];
	int *in=new int[size];
	for(int i=0;i<size;i++)
		cin>>pre[i];
	for(int i=0;i<size;i++)
		cin>>in[i];
	TreeNode<int>* root=takeInput(pre,in,0,size-1);
	cout<<"Tree: \n";
	printTreeWise(root);
}