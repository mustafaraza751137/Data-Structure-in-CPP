@csalgo

Coding Problem
Problem Statement: BST Class
Problem Level: MEDIUM
Problem Description:
Implement the BST class which includes following functions -
1. search
Given an element, find if that is present in BST or not. Return true or false.
2. insert -
Given an element, insert that element in the BST at the correct position. Assume unique elements will be given.
3. delete -
Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub-tree.
4. printTree (recursive) -
Print the BST in ithe following format -
For printing a node with data N, you need to follow the exact format -
N:L:x,R:y

wherer, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null.
There is no space in between.
You need to print all nodes in the recursive format in different lines.



@csalgo


#include<bits/stdc++.h>
using namespace std;

template<typename T>
class TreeNode{
	public:
		T data;
		TreeNode<T>* left;
		TreeNode<T>* right;
		TreeNode(T data){
			this->data=data;
			left=NULL;
			right=NULL;
		}
		~TreeNode(){
			delete left;
			delete right;
		}
};

class BST{
	private:
		TreeNode<int>* root;
		bool search(TreeNode<int>* node, int data){
			if(node==NULL)
				return false;
			if(node->data==data)
				return true;
			return node->data>data ? search(node->left,data) : search(node->right,data);
		}

		TreeNode<int>* insert(TreeNode<int>* node,int data){
			if(node==NULL){
				TreeNode<int>* newNode=new TreeNode<int>(data);
				return newNode;
			}
			if(node->data>data)
				node->left=insert(node->left,data);
			else
				node->right=insert(node->right,data);
			return node;
		}

		TreeNode<int>* deleteData(TreeNode<int>* node,int data){
			if(!node)
				return NULL;
			if(node->data==data){
				if(!node->left && !node->right){
					delete node;
					return NULL;
				}
				else if(!node->right){
					TreeNode<int>* temp=node->left;
					node->left=NULL;
					delete node;
					return temp;
				}
				else if(!node->left){
					TreeNode<int>* temp=node->right;
					node->right=NULL;
					delete node;
					return temp;
				}
				else{
					TreeNode<int>* minNode=node->right;
					while(minNode->left!=NULL)
						minNode=minNode->left;
					int minRight=minNode->data;
					node->data=minRight;
					deleteData(node->right,minRight);
					return node;
				}
			}
			else if(node->data>data)
				node->left=deleteData(node->left,data);
			else
				node->right=deleteData(node->right,data);
			return node;
		}

		void printTree(TreeNode<int>* root){
			if(root==NULL)
				return;
			cout<<root->data<<":";
			if(root->left)
				cout<<"L:"<<root->left->data;
			if(root->right)
				cout<<" R:"<<root->right->data;
			cout<<endl;
			printTree(root->left);
			printTree(root->right);
		}

	public:
		BST(){
			root=NULL;
		}
		~BST(){
			delete root;
		}
		bool search(int data){
			return search(root,data);
		}
		void insert(int data){
			this->root=insert(this->root,data);
		}
		void deleteData(int data){
			this->root=deleteData(this->root,data);
		}
		void printTree(){
			printTree(root);
		}
};

int main(){
	BST b;
	b.insert(10);
	b.insert(5);
	b.insert(20);
	b.insert(7);
	b.insert(3);
	b.insert(15);
	b.printTree();
	b.deleteData(10);
	b.printTree();
}